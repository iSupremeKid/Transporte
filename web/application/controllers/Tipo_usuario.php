<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Tipo_usuario extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Tipo_usuario_model');
    }

    /*
     * Listing of tipo_usuario
     */
    function index()
    {
        $data['tipo_usuario'] = $this->Tipo_usuario_model->get_all_tipo_usuario();

        $data['_view'] = 'tipo_usuario/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new tipo_usuario
     */
    function add()
    {
        $this->load->library('form_validation');

		$this->form_validation->set_rules('nombre','Nombre','max_length[30]|required|is_unique[tipo_usuario.nombre]',
    array('required' => 'Debe agregar un nombre para el tipo de usuario.',
          'max_length' => 'Como máximo solo pueden ser 30 caracteres.',
          'is_unique' => 'Nombre ya ha sido registrado anteriormente'
        )
    );

		if($this->form_validation->run())
        {
            $params = array(
				'nombre' => strtoupper($this->input->post('nombre')),
				'estado' => 1,
            );

            $tipo_usuario_id = $this->Tipo_usuario_model->add_tipo_usuario($params);
            redirect('tipo_usuario/index');
        }
        else
        {
            $data['_view'] = 'tipo_usuario/add';
            $this->load->view('layouts/main',$data);
        }
    }

    /*
     * Editing a tipo_usuario
     */
    function edit($id)
    {
        // check if the tipo_usuario exists before trying to edit it
        $data['tipo_usuario'] = $this->Tipo_usuario_model->get_tipo_usuario($id);

        if(isset($data['tipo_usuario']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('nombre','Nombre','max_length[30]|required|edit_unique[tipo_usuario.nombre.'.$id.']',
      array('required' => 'Debe agregar un nombre para el tipo de usuario.',
            'max_length' => 'Como máximo solo pueden ser 30 caracteres.',
            'edit_unique' => 'Nombre ya ha sido registrado anteriormente'
          )
    );

			if($this->form_validation->run())
            {
                $params = array(
					'nombre' => strtoupper($this->input->post('nombre'))
                );

                $this->Tipo_usuario_model->update_tipo_usuario($id,$params);
                redirect('tipo_usuario/index');
            }
            else
            {
                $data['_view'] = 'tipo_usuario/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The tipo_usuario you are trying to edit does not exist.');
    }

    /*
     * Deleting tipo_usuario
     */
    function remove($id)
    {
        $tipo_usuario = $this->Tipo_usuario_model->get_tipo_usuario($id);

        // check if the tipo_usuario exists before trying to delete it
        if(isset($tipo_usuario['id']))
        {
            $this->Tipo_usuario_model->delete_tipo_usuario($id);
            redirect('tipo_usuario/index');
        }
        else
            show_error('The tipo_usuario you are trying to delete does not exist.');
    }


    function deshabilitar($id){
      $data['tipo_usuario'] = $this->Tipo_usuario_model->get_tipo_usuario($id);

      if(isset($data['tipo_usuario']['id'])){
        $params = array('estado' => 0);
        $this->Tipo_usuario_model->update_tipo_usuario($id,$params);
        redirect('tipo_usuario/index');
      }else{
        show_error('El tipo de usuario que intenta deshabilitar no existe.');
      }

    }
    function habilitar($id){
      $data['tipo_usuario'] = $this->Tipo_usuario_model->get_tipo_usuario($id);

      if(isset($data['tipo_usuario']['id'])){
        $params = array('estado' => 1);
        $this->Tipo_usuario_model->update_tipo_usuario($id,$params);
        redirect('tipo_usuario/index');
      }else{
        show_error('El tipo de usuario que intenta habilitar no existe.');
      }
    }



}
