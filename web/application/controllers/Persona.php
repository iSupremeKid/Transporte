<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Persona extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Persona_model');
    }

    /*
     * Listing of persona
     */
    function index()
    {
        $data['persona'] = $this->Persona_model->get_all_persona();

        $data['_view'] = 'persona/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new persona
     */
    function add()
    {
        $this->load->library('form_validation');

		$this->form_validation->set_rules('telefono','Telefono','required|max_length[12]|numeric|is_unique[persona.telefono]',
    array('required' => 'Debe agregar un teléfono para la persona.',
          'max_length' => 'Como máximo solo pueden ser 12 caracteres.',
          'numeric' => 'Únicamente se aceptan números.',
          'is_unique' => 'Este teléfono ya ha sido registrado anteriormente.'
        )
  );
		$this->form_validation->set_rules('persona_perfil_id','Persona Perfil Id','required',
    array('required' => 'Debe seleccionar un perfil para la persona.'
        )
  );
		$this->form_validation->set_rules('nombres','Nombres','required|max_length[60]',
    array('required' => 'Debe agregar un nombre para la persona.',
          'max_length' => 'Como máximo solo pueden ser 60 caracteres.'
        )
  );
		$this->form_validation->set_rules('apellido_paterno','Apellido Paterno','required|max_length[30]',
    array('required' => 'Debe agregar un apellido paterno para la persona.',
          'max_length' => 'Como máximo solo pueden ser 30 caracteres.'
        )
  );
		$this->form_validation->set_rules('apellido_materno','Apellido Materno','max_length[30]',
    array('max_length' => 'Como máximo solo pueden ser 30 caracteres.'
        )
  );
		$this->form_validation->set_rules('identificacion','Identificacion','required|max_length[12]|is_unique[persona.identificacion]|numeric',
    array('required' => 'Debe agregar una identificación para la persona.',
          'max_length' => 'Como máximo solo pueden ser 12 caracteres.',
          'is_unique' => 'Esta identificación ya ha sido registrado anteriormente.',
          'numeric' => 'Únicamente se aceptan números'
        )
  );
		$this->form_validation->set_rules('saldo_disponible','Saldo Disponible','required|numeric',
    array('required' => 'Debe agregar un monto para la persona.',
          'numeric' => 'La cantidad ingresada debe ser numérica.'
        )
  );
		$this->form_validation->set_rules('token_culqi','Token Culqi','max_length[250]',
    array('max_length' => 'Como máximo solo puede ser 250 caracteres.')
  );

		if($this->form_validation->run())
        {
            $params = array(
				'telefono' => $this->input->post('telefono'),
				'persona_perfil_id' => $this->input->post('persona_perfil_id'),
				'nombres' => strtoupper($this->input->post('nombres')),
				'apellido_paterno' => strtoupper($this->input->post('apellido_paterno')),
				'apellido_materno' => strtoupper($this->input->post('apellido_materno')),
				'identificacion' => $this->input->post('identificacion'),
				'saldo_disponible' => $this->input->post('saldo_disponible'),
				'token_culqi' => $this->input->post('token_culqi'),
				'estado' => 1,
            );


            $persona_id = $this->Persona_model->add_persona($params);
            redirect('persona/index');
        }
        else
        {
			$this->load->model('Persona_perfil_model');
			$data['all_persona_perfil'] = $this->Persona_perfil_model->get_all_persona_perfil();

            $data['_view'] = 'persona/add';
            $this->load->view('layouts/main',$data);
        }
    }

    /*
     * Editing a persona
     */
    function edit($id)
    {

        // check if the persona exists before trying to edit it
        $data['persona'] = $this->Persona_model->get_persona($id);

        if(isset($data['persona']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('telefono','Telefono','required|max_length[12]|edit_unique[persona.telefono.'.$id.']',
      array('required' => 'Debe agregar un teléfono para la persona.',
            'max_length' => 'Como máximo solo pueden ser 12 caracteres.',
            'numeric' => 'Únicamente se aceptan números',
            'edit_unique' => 'Este teléfono ya ha sido registrado anteriormente.'
          )
      );

			$this->form_validation->set_rules('persona_perfil_id','Persona Perfil Id','required',
      array('required' => 'Debe seleccionar un perfil para la persona.'
          )
    );
			$this->form_validation->set_rules('nombres','Nombres','required|max_length[60]',
      array('required' => 'Debe agregar un nombre para la persona.',
            'max_length' => 'Como máximo solo pueden ser 60 caracteres.'
          )
    );
			$this->form_validation->set_rules('apellido_paterno','Apellido Paterno','required|max_length[30]',
      array('required' => 'Debe agregar un apellido paterno para la persona.',
            'max_length' => 'Como máximo solo pueden ser 30 caracteres.'
          )
    );
			$this->form_validation->set_rules('apellido_materno','Apellido Materno','max_length[30]',
      array('max_length' => 'Como máximo solo pueden ser 30 caracteres.'
          )
    );
			$this->form_validation->set_rules('identificacion','Identificacion','required|max_length[12]|numeric|edit_unique[persona.identificacion.'.$id.']',
      array('required' => 'Debe agregar una identificación para la persona.',
            'max_length' => 'Como máximo solo pueden ser 12 caracteres.',
            'edit_unique' => 'Esta identificación ya ha sido registrado anteriormente.',
            'numeric' => 'Únicamente se aceptan números'
          )
    );

      $this->form_validation->set_rules('saldo_disponible','Saldo Disponible','required|numeric',
      array('required' => 'Debe agregar un monto para la persona.',
            'numeric' => 'La cantidad ingresada debe ser numérica.'
          )
    );

    $this->form_validation->set_rules('token_culqi','Token Culqi','max_length[250]',
    array('max_length' => 'Como máximo solo puede ser 250 caracteres.')
  );

			if($this->form_validation->run())
            {
                $params = array(
					'telefono' => $this->input->post('telefono'),
					'persona_perfil_id' => $this->input->post('persona_perfil_id'),
					'nombres' => strtoupper($this->input->post('nombres')),
					'apellido_paterno' => strtoupper($this->input->post('apellido_paterno')),
					'apellido_materno' => strtoupper($this->input->post('apellido_materno')),
					'identificacion' => $this->input->post('identificacion'),
					'saldo_disponible' => $this->input->post('saldo_disponible'),
					'token_culqi' => $this->input->post('token_culqi')
                );

                $this->Persona_model->update_persona($id,$params);
                redirect('persona/index');
            }
            else
            {
				$this->load->model('Persona_perfil_model');
				$data['all_persona_perfil'] = $this->Persona_perfil_model->get_all_persona_perfil();

                $data['_view'] = 'persona/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The persona you are trying to edit does not exist.');
    }

    /*
     * Deleting persona
     */
    function remove($id)
    {
        $persona = $this->Persona_model->get_persona($id);

        // check if the persona exists before trying to delete it
        if(isset($persona['id']))
        {
            $this->Persona_model->delete_persona($id);
            redirect('persona/index');
        }
        else
            show_error('The persona you are trying to delete does not exist.');
    }

    function deshabilitar($id){
      $data['persona'] = $this->Persona_model->get_persona($id);

      if(isset($data['persona']['id'])){
        $params = array('estado' => 0);
        $this->Persona_model->update_persona($id,$params);
        redirect('persona/index');
      }else{
        show_error('El tipo de transporte que intenta deshabilitar no existe.');
      }

    }
    function habilitar($id){
      $data['persona'] = $this->Persona_model->get_persona($id);

      if(isset($data['persona']['id'])){
        $params = array('estado' => 1);
        $this->Persona_model->update_persona($id,$params);
        redirect('persona/index');
      }else{
        show_error('El tipo de transporte que intenta habilitar no existe.');
      }
    }

}
